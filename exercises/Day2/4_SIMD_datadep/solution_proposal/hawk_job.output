correctness for the naive loop + `@simd`: true
correctness for the optimized loop: true
correctness for the optimized loop + `@simd`: true

the naive loop: 3.27 μs
the naive loop + @simd: 3.75 μs
the optimized loop: 1.96 μs
the optimized loop + @simd: 1.61 μs
--------- loop_naive! ---------
	.text
	.file	"loop_naive!"
	.globl	"japi1_loop_naive!_396"         # -- Begin function japi1_loop_naive!_396
	.p2align	4, 0x90
	.type	"japi1_loop_naive!_396",@function
"japi1_loop_naive!_396":                # @"japi1_loop_naive!_396"
	.cfi_startproc
# %bb.0:                                # %top
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	mov	qword ptr [rbp - 56], rsi
	mov	rcx, qword ptr [rsi + 8]
	mov	rax, qword ptr [rsi]
	mov	rdx, qword ptr [rsi + 16]
	mov	rsi, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	rdx, qword ptr [rdx]
	mov	rsi, qword ptr [rsi]
	lea	rbx, [rcx + 32776]
	lea	rdi, [rax + 32768]
	lea	r8, [rdx + 32768]
	lea	r10, [rsi + 32768]
	cmp	rax, rbx
	setb	r13b
	cmp	rcx, rdi
	setb	r14b
	cmp	rax, r8
	setb	r11b
	cmp	rdx, rdi
	setb	r12b
	cmp	rax, r10
	setb	r9b
	cmp	rsi, rdi
	setb	r15b
	cmp	rcx, r8
	setb	r8b
	cmp	rdx, rbx
	setb	byte ptr [rbp - 41]             # 1-byte Folded Spill
	cmp	rcx, r10
	setb	dil
	cmp	rsi, rbx
	setb	r10b
	test	r13b, r14b
	jne	.LBB0_5
# %bb.1:                                # %top
	and	r11b, r12b
	jne	.LBB0_5
# %bb.2:                                # %top
	and	r9b, r15b
	jne	.LBB0_5
# %bb.3:                                # %top
	and	r8b, byte ptr [rbp - 41]        # 1-byte Folded Reload
	jne	.LBB0_5
# %bb.4:                                # %top
	and	dil, r10b
	jne	.LBB0_5
# %bb.7:                                # %vector.ph
	vmovsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_8:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vmovsd	xmm1, qword ptr [rax + 4*rdi]   # xmm1 = mem[0],zero
	vaddps	xmm0, xmm1, xmm0
	vmovlps	qword ptr [rax + 4*rdi], xmm0
	vmovsd	xmm0, qword ptr [rdx + 4*rdi]   # xmm0 = mem[0],zero
	vmovsd	xmm1, qword ptr [rsi + 4*rdi]   # xmm1 = mem[0],zero
	vaddps	xmm0, xmm0, xmm1
	vmovlps	qword ptr [rcx + 4*rdi + 8], xmm0
	add	rdi, 2
	cmp	rdi, 8192
	jne	.LBB0_8
	jmp	.LBB0_9
.LBB0_5:                                # %L2.preheader
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_6:                                # %L2
                                        # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rax + 4*rdi]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rcx + 4*rdi]
	vmovss	dword ptr [rax + 4*rdi], xmm0
	vmovss	xmm0, dword ptr [rdx + 4*rdi]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rsi + 4*rdi]
	vmovss	dword ptr [rcx + 4*rdi + 8], xmm0
	inc	rdi
	cmp	rdi, 8192
	jne	.LBB0_6
.LBB0_9:                                # %L24
	movabs	rax, 22840372523016
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	.cfi_def_cfa rsp, 8
	ret
.Lfunc_end0:
	.size	"japi1_loop_naive!_396", .Lfunc_end0-"japi1_loop_naive!_396"
	.cfi_endproc
                                        # -- End function
	.section	".note.GNU-stack","",@progbits




--------- loop_naive_simd! ---------
	.text
	.file	"loop_naive_simd!"
	.globl	"japi1_loop_naive_simd!_397"    # -- Begin function japi1_loop_naive_simd!_397
	.p2align	4, 0x90
	.type	"japi1_loop_naive_simd!_397",@function
"japi1_loop_naive_simd!_397":           # @"japi1_loop_naive_simd!_397"
	.cfi_startproc
# %bb.0:                                # %top
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	mov	qword ptr [rbp - 56], rsi
	mov	rcx, qword ptr [rsi + 8]
	mov	rax, qword ptr [rsi]
	mov	rdx, qword ptr [rsi + 16]
	mov	rsi, qword ptr [rsi + 24]
	mov	rcx, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	rdx, qword ptr [rdx]
	mov	rsi, qword ptr [rsi]
	lea	rbx, [rcx + 32776]
	lea	rdi, [rax + 32768]
	lea	r8, [rdx + 32768]
	lea	r10, [rsi + 32768]
	cmp	rax, rbx
	setb	r13b
	cmp	rcx, rdi
	setb	r14b
	cmp	rax, r8
	setb	r11b
	cmp	rdx, rdi
	setb	r12b
	cmp	rax, r10
	setb	r9b
	cmp	rsi, rdi
	setb	r15b
	cmp	rcx, r8
	setb	r8b
	cmp	rdx, rbx
	setb	byte ptr [rbp - 41]             # 1-byte Folded Spill
	cmp	rcx, r10
	setb	dil
	cmp	rsi, rbx
	setb	r10b
	test	r13b, r14b
	jne	.LBB0_5
# %bb.1:                                # %top
	and	r11b, r12b
	jne	.LBB0_5
# %bb.2:                                # %top
	and	r9b, r15b
	jne	.LBB0_5
# %bb.3:                                # %top
	and	r8b, byte ptr [rbp - 41]        # 1-byte Folded Reload
	jne	.LBB0_5
# %bb.4:                                # %top
	and	dil, r10b
	jne	.LBB0_5
# %bb.7:                                # %vector.ph
	vmovsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_8:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vmovsd	xmm1, qword ptr [rax + 4*rdi]   # xmm1 = mem[0],zero
	vaddps	xmm0, xmm1, xmm0
	vmovlps	qword ptr [rax + 4*rdi], xmm0
	vmovsd	xmm0, qword ptr [rdx + 4*rdi]   # xmm0 = mem[0],zero
	vmovsd	xmm1, qword ptr [rsi + 4*rdi]   # xmm1 = mem[0],zero
	vaddps	xmm0, xmm0, xmm1
	vmovlps	qword ptr [rcx + 4*rdi + 8], xmm0
	add	rdi, 2
	cmp	rdi, 8192
	jne	.LBB0_8
	jmp	.LBB0_9
.LBB0_5:                                # %L7.preheader
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_6:                                # %L7
                                        # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rax + 4*rdi]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rcx + 4*rdi]
	vmovss	dword ptr [rax + 4*rdi], xmm0
	vmovss	xmm0, dword ptr [rdx + 4*rdi]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rsi + 4*rdi]
	vmovss	dword ptr [rcx + 4*rdi + 8], xmm0
	inc	rdi
	cmp	rdi, 8192
	jne	.LBB0_6
.LBB0_9:                                # %L39
	movabs	rax, 22840372523016
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	.cfi_def_cfa rsp, 8
	ret
.Lfunc_end0:
	.size	"japi1_loop_naive_simd!_397", .Lfunc_end0-"japi1_loop_naive_simd!_397"
	.cfi_endproc
                                        # -- End function
	.type	.L_j_const1,@object             # @_j_const1
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	3
.L_j_const1:
	.quad	1                               # 0x1
	.quad	8192                            # 0x2000
	.size	.L_j_const1, 16

	.section	".note.GNU-stack","",@progbits




--------- loop_opt! ---------
	.text
	.file	"loop_opt!"
	.globl	"japi1_loop_opt!_399"           # -- Begin function japi1_loop_opt!_399
	.p2align	4, 0x90
	.type	"japi1_loop_opt!_399",@function
"japi1_loop_opt!_399":                  # @"japi1_loop_opt!_399"
	.cfi_startproc
# %bb.0:                                # %top
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	mov	qword ptr [rbp - 8], rsi
	mov	rax, qword ptr [rsi + 8]
	mov	rcx, qword ptr [rsi + 16]
	mov	r8, qword ptr [rsi]
	mov	rsi, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	rsi, qword ptr [rsi]
	lea	rcx, [rax + 8]
	lea	r9, [rdx + 32768]
	lea	rdi, [rax + 32776]
	lea	r10, [rsi + 32768]
	cmp	rcx, r9
	setb	r9b
	cmp	rdx, rdi
	setb	r11b
	cmp	rcx, r10
	setb	cl
	cmp	rsi, rdi
	setb	dil
	test	r9b, r11b
	jne	.LBB0_4
# %bb.1:                                # %top
	and	cl, dil
	jne	.LBB0_4
# %bb.2:                                # %vector.body.preheader
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_3:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vmovups	ymm0, ymmword ptr [rdx + 4*rdi]
	vmovups	ymm1, ymmword ptr [rdx + 4*rdi + 32]
	vmovups	ymm2, ymmword ptr [rdx + 4*rdi + 64]
	vmovups	ymm3, ymmword ptr [rdx + 4*rdi + 96]
	vaddps	ymm0, ymm0, ymmword ptr [rsi + 4*rdi]
	vaddps	ymm1, ymm1, ymmword ptr [rsi + 4*rdi + 32]
	vaddps	ymm2, ymm2, ymmword ptr [rsi + 4*rdi + 64]
	vaddps	ymm3, ymm3, ymmword ptr [rsi + 4*rdi + 96]
	vmovups	ymmword ptr [rax + 4*rdi + 8], ymm0
	vmovups	ymmword ptr [rax + 4*rdi + 40], ymm1
	vmovups	ymmword ptr [rax + 4*rdi + 72], ymm2
	vmovups	ymmword ptr [rax + 4*rdi + 104], ymm3
	add	rdi, 32
	cmp	rdi, 8192
	jne	.LBB0_3
	jmp	.LBB0_6
.LBB0_4:                                # %L2.preheader
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_5:                                # %L2
                                        # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rdx + 4*rdi]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rsi + 4*rdi]
	vmovss	dword ptr [rax + 4*rdi + 8], xmm0
	inc	rdi
	cmp	rdi, 8192
	jne	.LBB0_5
.LBB0_6:                                # %L21.preheader
	mov	rcx, qword ptr [r8]
	lea	rdx, [rax + 32768]
	cmp	rcx, rdx
	jae	.LBB0_8
# %bb.7:                                # %L21.preheader
	lea	rdx, [rcx + 32768]
	cmp	rax, rdx
	jae	.LBB0_8
# %bb.10:                               # %L21.preheader54
	xor	edx, edx
	.p2align	4, 0x90
.LBB0_11:                               # %L21
                                        # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rcx + 4*rdx]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rax + 4*rdx]
	vmovss	dword ptr [rcx + 4*rdx], xmm0
	inc	rdx
	cmp	rdx, 8192
	jne	.LBB0_11
	jmp	.LBB0_12
.LBB0_8:                                # %vector.body39.preheader
	xor	edx, edx
	.p2align	4, 0x90
.LBB0_9:                                # %vector.body39
                                        # =>This Inner Loop Header: Depth=1
	vmovups	ymm0, ymmword ptr [rcx + 4*rdx]
	vmovups	ymm1, ymmword ptr [rcx + 4*rdx + 32]
	vmovups	ymm2, ymmword ptr [rcx + 4*rdx + 64]
	vmovups	ymm3, ymmword ptr [rcx + 4*rdx + 96]
	vaddps	ymm0, ymm0, ymmword ptr [rax + 4*rdx]
	vaddps	ymm1, ymm1, ymmword ptr [rax + 4*rdx + 32]
	vaddps	ymm2, ymm2, ymmword ptr [rax + 4*rdx + 64]
	vaddps	ymm3, ymm3, ymmword ptr [rax + 4*rdx + 96]
	vmovups	ymmword ptr [rcx + 4*rdx], ymm0
	vmovups	ymmword ptr [rcx + 4*rdx + 32], ymm1
	vmovups	ymmword ptr [rcx + 4*rdx + 64], ymm2
	vmovups	ymmword ptr [rcx + 4*rdx + 96], ymm3
	add	rdx, 32
	cmp	rdx, 8192
	jne	.LBB0_9
.LBB0_12:                               # %L38
	movabs	rax, 22840372523016
	pop	rbp
	.cfi_def_cfa rsp, 8
	vzeroupper
	ret
.Lfunc_end0:
	.size	"japi1_loop_opt!_399", .Lfunc_end0-"japi1_loop_opt!_399"
	.cfi_endproc
                                        # -- End function
	.section	".note.GNU-stack","",@progbits




--------- loop_opt_simd! ---------
	.text
	.file	"loop_opt_simd!"
	.globl	"japi1_loop_opt_simd!_400"      # -- Begin function japi1_loop_opt_simd!_400
	.p2align	4, 0x90
	.type	"japi1_loop_opt_simd!_400",@function
"japi1_loop_opt_simd!_400":             # @"japi1_loop_opt_simd!_400"
	.cfi_startproc
# %bb.0:                                # %top
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset rbp, -16
	mov	rbp, rsp
	.cfi_def_cfa_register rbp
	mov	qword ptr [rbp - 8], rsi
	mov	rax, qword ptr [rsi + 8]
	mov	rcx, qword ptr [rsi + 16]
	mov	r8, qword ptr [rsi]
	mov	rsi, qword ptr [rsi + 24]
	mov	rdx, qword ptr [rcx]
	mov	rax, qword ptr [rax]
	mov	rsi, qword ptr [rsi]
	lea	rcx, [rax + 8]
	lea	r9, [rdx + 32768]
	lea	rdi, [rax + 32776]
	lea	r10, [rsi + 32768]
	cmp	rcx, r9
	setb	r9b
	cmp	rdx, rdi
	setb	r11b
	cmp	rcx, r10
	setb	cl
	cmp	rsi, rdi
	setb	dil
	test	r9b, r11b
	jne	.LBB0_8
# %bb.1:                                # %top
	and	cl, dil
	jne	.LBB0_8
# %bb.2:                                # %vector.body.preheader
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_3:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vmovups	ymm0, ymmword ptr [rdx + 4*rdi]
	vmovups	ymm1, ymmword ptr [rdx + 4*rdi + 32]
	vmovups	ymm2, ymmword ptr [rdx + 4*rdi + 64]
	vmovups	ymm3, ymmword ptr [rdx + 4*rdi + 96]
	vaddps	ymm0, ymm0, ymmword ptr [rsi + 4*rdi]
	vaddps	ymm1, ymm1, ymmword ptr [rsi + 4*rdi + 32]
	vaddps	ymm2, ymm2, ymmword ptr [rsi + 4*rdi + 64]
	vaddps	ymm3, ymm3, ymmword ptr [rsi + 4*rdi + 96]
	vmovups	ymmword ptr [rax + 4*rdi + 8], ymm0
	vmovups	ymmword ptr [rax + 4*rdi + 40], ymm1
	vmovups	ymmword ptr [rax + 4*rdi + 72], ymm2
	vmovups	ymmword ptr [rax + 4*rdi + 104], ymm3
	add	rdi, 32
	cmp	rdi, 8192
	jne	.LBB0_3
	jmp	.LBB0_4
.LBB0_8:                                # %L7.preheader
	xor	edi, edi
	.p2align	4, 0x90
.LBB0_9:                                # %L7
                                        # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rdx + 4*rdi]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rsi + 4*rdi]
	vmovss	dword ptr [rax + 4*rdi + 8], xmm0
	inc	rdi
	cmp	rdi, 8192
	jne	.LBB0_9
.LBB0_4:                                # %L38.preheader
	mov	rcx, qword ptr [r8]
	lea	rdx, [rax + 32768]
	cmp	rcx, rdx
	jae	.LBB0_6
# %bb.5:                                # %L38.preheader
	lea	rdx, [rcx + 32768]
	cmp	rax, rdx
	jae	.LBB0_6
# %bb.10:                               # %L41.preheader
	xor	edx, edx
	.p2align	4, 0x90
.LBB0_11:                               # %L41
                                        # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rcx + 4*rdx]   # xmm0 = mem[0],zero,zero,zero
	vaddss	xmm0, xmm0, dword ptr [rax + 4*rdx]
	vmovss	dword ptr [rcx + 4*rdx], xmm0
	inc	rdx
	cmp	rdx, 8192
	jne	.LBB0_11
	jmp	.LBB0_12
.LBB0_6:                                # %vector.body35.preheader
	xor	edx, edx
	.p2align	4, 0x90
.LBB0_7:                                # %vector.body35
                                        # =>This Inner Loop Header: Depth=1
	vmovups	ymm0, ymmword ptr [rcx + 4*rdx]
	vmovups	ymm1, ymmword ptr [rcx + 4*rdx + 32]
	vmovups	ymm2, ymmword ptr [rcx + 4*rdx + 64]
	vmovups	ymm3, ymmword ptr [rcx + 4*rdx + 96]
	vaddps	ymm0, ymm0, ymmword ptr [rax + 4*rdx]
	vaddps	ymm1, ymm1, ymmword ptr [rax + 4*rdx + 32]
	vaddps	ymm2, ymm2, ymmword ptr [rax + 4*rdx + 64]
	vaddps	ymm3, ymm3, ymmword ptr [rax + 4*rdx + 96]
	vmovups	ymmword ptr [rcx + 4*rdx], ymm0
	vmovups	ymmword ptr [rcx + 4*rdx + 32], ymm1
	vmovups	ymmword ptr [rcx + 4*rdx + 64], ymm2
	vmovups	ymmword ptr [rcx + 4*rdx + 96], ymm3
	add	rdx, 32
	cmp	rdx, 8192
	jne	.LBB0_7
.LBB0_12:                               # %L68
	movabs	rax, 22840372523016
	pop	rbp
	.cfi_def_cfa rsp, 8
	vzeroupper
	ret
.Lfunc_end0:
	.size	"japi1_loop_opt_simd!_400", .Lfunc_end0-"japi1_loop_opt_simd!_400"
	.cfi_endproc
                                        # -- End function
	.type	.L_j_const1,@object             # @_j_const1
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	3
.L_j_const1:
	.quad	1                               # 0x1
	.quad	8192                            # 0x2000
	.size	.L_j_const1, 16

	.section	".note.GNU-stack","",@progbits




